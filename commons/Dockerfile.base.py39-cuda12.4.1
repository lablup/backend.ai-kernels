FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu20.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ARG CUDA=12.4
ENV CUDA_VERSION=12.4.1
ARG LIBNVINFER=8.6.1.6-1
ARG LIBNVINFER_MAJOR_VERSION=8
ARG CUDNN=9.1.0.70
ENV CUDNN_VERSION=9.1.0.70
ENV NCCL=2.21.5
ENV NCCL_VERSION=2.21.5-1
ENV NV_LIBNCCL_PACKAGE=libnccl2=2.21.5-1+cuda12.4
ENV NV_LIBNPP_DEV_PACKAGE=libnpp-dev-12-4=12.2.5.30-1
ENV NV_LIBNPP_DEV_VERSION=12.2.5.30-1
ENV NV_LIBCUSPARSE_DEV_VERSION=12.3.1.170-1
ENV NV_NVML_DEV_VERSION=12.4.127-1
ENV NV_CUDA_CUDART_DEV_VERSION=12.4.127-1
ENV NV_CUDA_LIB_VERSION=12.4.1-1
ENV NV_LIBCUBLAS_DEV_VERSION=12.4.5.8-1
ENV NV_LIBCUBLAS_DEV_PACKAGE_NAME=libcublas-dev-12-4
ENV MLNX_OFED_VERSION=5.8-6.0.4.2
ENV NUMPY_VERSION=1.22.4
ENV SCIPY_VERSION=1.9.3
ENV OPENMPI=4.1.8
ENV OPENCV_VERSION=4.11.0
ENV CODESERVER=4.96.4
ARG python=3.9
ENV PYTHON_VERSION=${python}

ENV DEBIAN_FRONTEND=noninteractive \
    MPLBACKEND=Svg \
    PIP_IGNORE_INSTALLED=0 \
    PYTHONUNBUFFERED=1 \
    LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    _CUDA_COMPAT_PATH="/usr/local/cuda/compat" \
    LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    PATH="/usr/local/mpi/bin:/usr/local/ucx:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/bin/cmake/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tensorrt/bin:/usr/local/src/lightgbm/LightGBM:/usr/local/bin/mecab" \
    CPLUS_INCLUDE_PATH=/usr/include/gdal \
    C_INCLUDE_PATH=/usr/include/gdal \
    mecab_dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic \
    LANG=C.UTF-8

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

WORKDIR /tmp
RUN apt-get clean && \
    rm -fr /var/lib/apt/lists/* && \
    apt-get update -y --allow-releaseinfo-change --allow-insecure-repositories  -o Acquire::http::No-Cache=True -o Acquire::BrokenProxy=true && \
    apt-get install -y --no-install-recommends software-properties-common wget curl && \
    curl -sL https://deb.nodesource.com/setup_20.x | bash - && \
    add-apt-repository -y "deb http://security.ubuntu.com/ubuntu focal-security main" && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    add-apt-repository -y ppa:bashtop-monitor/bashtop && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    wget https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sources.list.d/intelproducts.list && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
	autoconf \
    automake \
    autotools-dev \
	bashtop \
    bison \
	build-essential \
	ca-certificates \
    chrpath \
    curl \
    debhelper \
	devscripts \
	dh-make \
    dkms \
    dpatch \
    ethtool \
	fakeroot \
	ffmpeg \
	fonts-nanum \
	fonts-nanum-coding \
	fonts-nanum-extra \
    flex \
	g++ \
	gcc \
	gfortran \
	gir1.2-gtk-3.0 \
	git \
	graphviz \
	htop \
	iputils-ping \
	kmod \
    lintian \
	libasound2-dev \
	libatlas-base-dev \
	libavcodec-dev \
	libavformat-dev \
	libboost-dev \
	libboost-filesystem-dev \
	libboost-system-dev \
	libcairo2-dev \
	libcurl4-openssl-dev \
	libeigen3-dev \
    libelf1 \
	libfaac-dev \
	libfreetype6-dev \
    libfuse2 \
	libgdal-dev \
	libgeos++-dev \
	libgeos-dev \
    libgfortran5 \
	libgflags-dev \
	libgirepository1.0-dev \
	libgoogle-glog-dev \
	libgphoto2-dev \
	libgstreamer-plugins-base1.0-dev \
	libgstreamer1.0-dev \
	libgtk-3-dev \
	libhdf5-dev \
    libmpdec2 \
    libnl-3-dev \
    libnl-3-200 \
    libnl-route-3-200 \
    libnl-route-3-dev \
    libnuma1 \
    libnvinfer8=8.6.1.6-1+cuda12.0 \
	libnvonnxparsers8=8.6.1.6-1+cuda12.0 \
	libnvparsers8=8.6.1.6-1+cuda12.0 \
	libnvinfer-plugin8=8.6.1.6-1+cuda12.0  \
	libnvparsers-dev=8.6.1.6-1+cuda12.0  \
    libnvinfer-dev=8.6.1.6-1+cuda12.0  \
    libnvinfer-headers-dev=8.6.1.6-1+cuda12.0  \
	libjpeg-dev \
	liblapack-dev \
    libltdl-dev \
    libmnl0 \
	libmp3lame-dev \
	libnuma-dev \
	libopenblas-dev \
	libopencore-amrnb-dev \
	libopencore-amrwb-dev \
	libpng-dev \
	libportmidi-dev \
	libproj-dev \
	libprotobuf-dev \
	libsdl2-dev \
	libsdl-image1.2-dev \
	libsdl-mixer1.2-dev \
	libsdl-ttf2.0-dev \
	libsm6 \
	libsmpeg-dev \
	libssl-dev \
	libswscale-dev \
	libtbb-dev \
	libtheora-dev \
	libtiff-dev \
    libusb-1.0-0 \
	libv4l-dev \
	libvorbis-dev \
	libx264-dev \
	libxext6 \
	libxine2-dev \
	libxml2-dev \
	libxrender-dev \
	libxslt1-dev \
	libxvidcore-dev \
	libzmq3-dev \
    lsof \
    m4 \
	make \
	mercurial \
	mime-support \
	ncurses-term \
	net-tools \
    ninja-build \
	nodejs \
	nvtop \
	openjdk-8-jdk \
	openssh-client \
	openssh-server \
    pciutils \
	pdsh \
    perl-modules-5.30 \
	pkg-config \
	proj-bin \
	protobuf-compiler \
    python3-apt \
	python${PYTHON_VERSION} \
	python${PYTHON_VERSION}-dev \
    python${PYTHON_VERSION}-distutils \
	python3-gdal \
    swig \
	subversion \
    tcl \
    tk \
	udev \
    unzip \
	v4l-utils \
	vim \
	x264 \
	xvfb \
	xz-utils \
	yasm \
	zip \
    zlib1g-dev && \
# install nccl	
    curl -fsSL https://developer.download.nvidia.com/compute/redist/nccl/v${NCCL}/nccl_${NCCL}-1+cuda${CUDA}_x86_64.txz -O && \
    tar --no-same-owner --keep-old-files --lzma -xvf nccl_${NCCL}-1+cuda${CUDA}_x86_64.txz -C /usr/local/cuda/lib64/ --strip-components=2 --wildcards '*/lib/libnccl.so.*' && \
    tar --no-same-owner --keep-old-files --lzma -xvf nccl_${NCCL}-1+cuda${CUDA}_x86_64.txz -C /usr/lib/pkgconfig/ --strip-components=3 --wildcards '*/lib/pkgconfig/*' && \
    rm nccl_${NCCL}-1+cuda${CUDA}_x86_64.txz && \
    ldconfig  && \
    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf && \
    ldconfig && \
    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.9.1.0 /usr/local/cuda/lib64/libcudnn.so && \
    ldconfig && \
    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \
# Add OpenCL ICD files for LightGBM
    mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

RUN wget https://github.com/Kitware/CMake/releases/download/v3.30.8/cmake-3.30.8-Linux-x86_64.sh \
         -q -O /tmp/cmake-install.sh && \
    chmod u+x /tmp/cmake-install.sh && \
    mkdir /usr/bin/cmake && \
    /tmp/cmake-install.sh --skip-license --prefix=/usr/bin/cmake && \
    rm /tmp/cmake-install.sh

# Oracle client
RUN mkdir -p /opt/oracle && \
    cd /opt/oracle && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update -y --allow-releaseinfo-change --allow-insecure-repositories  -o Acquire::http::No-Cache=True -o Acquire::BrokenProxy=true && \
    apt-get install -y --no-install-recommends libaio1 default-libmysqlclient-dev && \
    wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip && \
    unzip instantclient-basiclite-linuxx64.zip && \
    rm -f instantclient-basiclite-linuxx64.zip && \
    cd /opt/oracle/instantclient* && \
    rm -f *jdbc* *occi* *mysql* *README *jar uidrvci genezi adrci && \
    echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.conf && \
    ldconfig

# install git-lfs
WORKDIR /tmp
RUN curl -sLO https://github.com/git-lfs/git-lfs/releases/download/v3.6.1/git-lfs-linux-amd64-v3.6.1.tar.gz && \
    tar -zxf git-lfs-linux-amd64-v3.6.1.tar.gz && \
    cd ./git-lfs-3.6.1 && \
    bash install.sh && \
    rm -rf /tmp/*

# Install BashTop
WORKDIR /tmp
RUN git clone https://github.com/aristocratos/bashtop.git && \
    cd bashtop && \
    make install

# Install VSCode
WORKDIR /tmp
RUN curl -fL https://github.com/cdr/code-server/releases/download/v$CODESERVER/code-server-$CODESERVER-linux-amd64.tar.gz \
      | tar -C /usr/local/lib -xz && \ 
    mv /usr/local/lib/code-server-$CODESERVER-linux-amd64 /usr/local/lib/code-server-$CODESERVER && \
    ln -s /usr/local/lib/code-server-$CODESERVER/bin/code-server /usr/local/bin/code-server 


RUN rm /usr/bin/python3 && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 2

WORKDIR /tmp
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip Cython pybind11 pythran

# OpenBlas
WORKDIR /tmp
RUN git clone -q --branch=v0.3.18 https://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make DYNAMIC_ARCH=1 NO_AFFINITY=1 NUM_THREADS=48 FC=gfortran && \
    make install
# Numpy    
RUN python3 -m pip install --upgrade "pip==23.3.2" "setuptools==59.8.0" "Cython==0.29.37" wheel && \ 
    cd /tmp && \
    git clone --branch=v${NUMPY_VERSION} --depth=1 https://github.com/numpy/numpy.git numpy && \
    cd numpy && \
    git checkout -b v${NUMPY_VERSION} && \
    git submodule update --init && \
    python3 setup.py bdist_wheel -d /tmp 

# Scipy
RUN python3 -m pip install --upgrade meson meson-python packaging ninja setuptools wheel &&\
    cd /tmp && \
    git clone --branch=v${SCIPY_VERSION} --depth=1 https://github.com/scipy/scipy.git scipy && \
    cd scipy && \
    git checkout -b v${SCIPY_VERSION} && \  
    git submodule update --init --recursive && \
    python3 -m pip install -U --no-cache-dir /tmp/numpy-*.whl && \
    python3 -m pip install . --no-build-isolation
RUN cd /tmp && \
    git clone --recursive https://github.com/bodono/scs-python.git  && \
    cd /tmp/scs-python && \
    python3 -m pip install --verbose . 

# install NLP packages *mecab-ko & khai*
WORKDIR /tmp
RUN curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz && \
    tar zxfv mecab-0.996-ko-0.9.2.tar.gz && \
    cd mecab-0.996-ko-0.9.2 && \
    ./configure && \
    make -j$(nproc) && \
    make check && \
    make install && \
    echo "Install mecab-ko-dic" && \
    cd /tmp && \
    ldconfig && \
    curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.1.1-20180720.tar.gz && \
    tar -zxvf mecab-ko-dic-2.1.1-20180720.tar.gz && \
    cd mecab-ko-dic-2.1.1-20180720 && \
    ./autogen.sh && \
    ./configure && \
    make -j$(nproc) && \
    sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc' && \
    make install && \
    cd /tmp && \
    git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git mecab-python && \
    cd /tmp/mecab-python && \
    sed -i "s/version = cmd1(\"mecab-config --version\")/version = '0.996+ko.0.9.2'/" setup.py && \
    python3 -m pip install . --no-deps

# OpenCV
WORKDIR /tmp
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_java=OFF \
      -D WITH_CUDA=ON \
      -D WITH_CUDNN=OFF \
      -D OPENCV_DNN_CUDA=OFF \
      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.4 \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D WITH_OPENGL=ON \
      -D WITH_OPENCL=ON \
      -D WITH_IPP=ON \
      -D WITH_TBB=ON \
      -D WITH_EIGEN=ON \
      -D WITH_V4L=ON \
      -D BUILD_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-${OPENCV_VERSION}/modules" \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      .. 2>&1 | tee cmake_messages.txt && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    python3 -m pip install --no-cache-dir opencv-python && \
    rm -fr opencv* 

# XGBoost
RUN git clone  --recursive  --branch v2.1.4 https://github.com/dmlc/xgboost && \
    cd xgboost && \
    mkdir build && \
    cd build && \
    cmake .. -DUSE_CUDA=ON -DUSE_NCCL=ON && \
    make -j$(nproc) && \
    cd ../python-package && \
    python3 -m pip install .

# LightGBM
RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
    git clone --recursive --branch stable --depth 1 https://github.com/microsoft/LightGBM && \
    cp ./LightGBM/LICENSE ./LightGBM/python-package/ && \
    cp ./LightGBM/CMakeLists.txt ./LightGBM/python-package/ && \
    cd LightGBM && mkdir build && cd build && \
    cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make OPENCL_HEADERS=/usr/local/cuda-12.4/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-12.4/targets/x86_64-linux/lib -j$(nproc) && \
    cd /usr/local/src/lightgbm/LightGBM/python-package && \
    #python3 setup.py install --precompile
    python3 -m pip install build

# Install Open UCX
WORKDIR /tmp
RUN wget https://github.com/openucx/ucx/archive/v1.10.0.tar.gz && \
    tar xvf v1.10.0.tar.gz && \
    cd ucx-1.10.0 && \
    bash ./autogen.sh && \
    mkdir build && \
    cd build && \
    ../configure --prefix=/usr/local/ucx && \
    make -j$(nproc) && \
    make install 

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI}.tar.gz && \
    tar zxf openmpi-${OPENMPI}.tar.gz && \
    cd openmpi-${OPENMPI} && \
    ./configure --enable-orterun-prefix-by-default --with-cuda --with-ucx=/usr/local/ucx --enable-mca-no-build=btl-uct && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi*

# Install OpenSSH for MPI to communicate between containers

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd && \
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
RUN echo "btl_tcp_if_exclude = lo,docker0" >> /usr/local/etc/openmpi-mca-params.conf

# Clean up
RUN apt autoclean && \
    sed -i 's/source \/usr\/local\/nvm\/nvm.sh//' /etc/bash.bashrc && \
    rm -rf /var/lib/apt/lists/* && \	
    rm -rf /root/.cache && \
    rm -rf /tmp/*

WORKDIR /home/work
