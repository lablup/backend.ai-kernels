FROM nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04
MAINTAINER Mario Cho "m.cho@lablup.com"

ARG CUDA=11.7
ARG CUDNN=8.5.0.96-1
ENV CUDNN_VERSION 8.5.0.96 
ENV NCCL=2.13.4 
ENV NCCL_VERSION=2.13.4-1 
ENV MLNX_OFED_VERSION=5.4-2.4.1.3 
ENV OPENMPI 4.1.2 
# configure for enviroments    
ENV JUPYTER_PATH="/opt/conda/share/jupyter"
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Seoul \
    MPLBACKEND=Svg \
    PIP_IGNORE_INSTALLED=0 \
    PYTHONUNBUFFERED=1 \
    LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    _CUDA_COMPAT_PATH="/usr/local/cuda/compat" \
    LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:/usr/include/x86_64-linux-gnu:/usr/local/lib" \
    PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/mpi/bin:/usr/local/ucx:/opt/conda/bin:/usr/bin/cmake/bin:/usr/local/sbin:/usr/bin/cmake/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/src/lightgbm/LightGBM" \
    CPLUS_INCLUDE_PATH=/usr/include/gdal \
    C_INCLUDE_PATH=/usr/include/gdal \
    mecab_dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic \
    LANG=C.UTF-8 \
# env for mpi4jax    
    MPI4JAX_DEBUG=1 \
    MPI4JAX_USE_CUDA_MPI=1 \
    XLA_PYTHON_CLIENT_PREALLOCATE=false \
    JAX_PLATFORM_NAME="gpu" \
    LANG=C.UTF-8
ENV CRAN_MIRROR=https://cloud.r-project.org \
    CRAN_MIRROR_TAG=-cran40
ARG RPY2_VERSION=RELEASE_3_5_6
ARG RPY2_CFFI_MODE=BOTH

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

WORKDIR /tmp
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends software-properties-common wget curl && \
    curl -sL https://deb.nodesource.com/setup_16.x | bash - && \
    curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null && \
    echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | tee /etc/apt/sources.list.d/yarn.list && \
    add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    add-apt-repository -y ppa:bashtop-monitor/bashtop && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub && \
    wget -qO- "${CRAN_MIRROR}"/bin/linux/ubuntu/marutter_pubkey.asc \
    | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc && \
    add-apt-repository \
        --yes \
        "deb ${CRAN_MIRROR}/bin/linux/ubuntu/ $(lsb_release -c -s)${CRAN_MIRROR_TAG}/" && \
    apt-get update -y && \ 
    apt-get install -y --no-install-recommends \
	automake \
	bashtop \
	bison \
	build-essential \
	ca-certificates \
	chrpath \
	devscripts \
	dh-make \
	dkms \
	dpatch \
	dirmngr \
	ethtool \
	fakeroot \
	ffmpeg \
	flex \
	fonts-nanum \
	fonts-nanum-coding \
	fonts-nanum-extra \
	g++ \
	gcc \
	gdal-bin \
	gfortran \
	gir1.2-gtk-3.0 \
	git \
	graphviz \
	htop \
	iputils-ping \
	libasound2-dev \
	libatlas-base-dev \
	libavcodec-dev \
	libavformat-dev \
	libavresample-dev \
	libboost-dev \
	libboost-filesystem-dev \
	libboost-system-dev \
	libcairo-dev \
	libcairo2-dev \
	libcurl3-dev \
	libdc1394-22-dev \
	libeigen3-dev \
	libfaac-dev \
	libfftw3-dev \
	libfreetype6-dev \
	libfuse2 \
	libgdal-dev \
	libgdal-dev \
	libgeos++-dev \
	libgeos-dev \
	libgflags-dev \
	libgfortran4 \
	libgirepository1.0-dev \
	libglib2.0-0 \
	libgoogle-glog-dev \
	libgphoto2-dev \
	libgstreamer-plugins-base1.0-dev \
	libgstreamer1.0-dev \
	libgtk-3-dev \
	libhdf5-dev \	
	libhdf5-serial-dev \
	libjasper-dev \
	libjpeg-dev \
	liblapack-dev \
	libmnl0 \
	libmp3lame-dev \
	libmpdec2 \
	libnlopt-dev \
	libnl-3-200 \
	libnl-3-dev \
	libnl-route-3-200 \
	libnl-route-3-dev \
	libnuma-dev \
	libopenblas-dev \
	libopencore-amrnb-dev \
	libopencore-amrwb-dev \
	libpci3 \
	libpng-dev \
	libportmidi-dev \
	libproj-dev \
	libprotobuf-dev \
	libsdl-dev \
	libsdl-image1.2-dev \
	libsdl-mixer1.2-dev \
	libsdl-ttf2.0-dev \
	libsm6 \
	libsmpeg-dev \
	libssl-dev \
	libswscale-dev \
	libtbb-dev \
	libtheora-dev \
	libtiff-dev \
	libv4l-dev \
	libvorbis-dev \
	libx264-dev \
	libxext6 \
	libxine2-dev \
	libxml2-dev \
	libxrender-dev \
	libxrender1 \
	libxslt1-dev \
	libxvidcore-dev \
	libzmq3-dev \
	lintian \
	lsof \
	make \
	mercurial \
	mime-support \
	mpich \
	ncurses-term \
	net-tools \
	nodejs \
	openjdk-8-jdk \
	openssh-client \
	openssh-server \
	pciutils \
	pdsh \
	pkg-config \
	proj-bin \
	protobuf-compiler \
	python-apt \
	python3-gdal \
	python-xkit \
	r-base \
	r-base-dev \
	screen-resolution-extra \
	subversion \
	swig \
	tk \
	unzip \
	v4l-utils \	
	vim \
	x264 \
	xvfb \
	xz-utils \
	yarn \
	yasm \
	zip \
        tcl \
        udev \
        zlib1g-dev && \
# install nccl	
    curl -fsSL https://developer.download.nvidia.com/compute/redist/nccl/v2.13/nccl_2.13.4-1+cuda11.7_x86_64.txz -O && \
    tar --no-same-owner --keep-old-files --lzma -xvf nccl_2.13.4-1+cuda11.7_x86_64.txz -C /usr/local/cuda/lib64/ --strip-components=2 --wildcards '*/lib/libnccl.so.*' && \
    tar --no-same-owner --keep-old-files --lzma -xvf nccl_${NCCL}-1+cuda11.7_x86_64.txz -C /usr/lib/pkgconfig/ --strip-components=3 --wildcards '*/lib/pkgconfig/*' && \
    rm nccl_${NCCL}-1+cuda11.7_x86_64.txz && \
    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf && \
    ldconfig && \
# Add OpenCL ICD files for LightGBM
    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \
    mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd && \
    ldconfig && \
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_4.12.0-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /root/.bashrc && \
    echo "conda activate base" >> /root/.bashrc && \
    curl -L "https://github.com/krallin/tini/releases/download/v0.19.0/tini_0.19.0.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb && \
    /opt/conda/bin/conda config --add channels conda-forge && \
    /opt/conda/bin/conda config --add channels bioconda && \
    /opt/conda/bin/conda config --add channels intel && \
    /opt/conda/bin/conda config --add envs_dirs /home/work/.conda && \
    /opt/conda/bin/conda update --prefix /opt/conda conda && \
    /opt/conda/bin/conda install -c intel intelpython3_core blas=*=*mkl && \
    python3 -m pip install setuptools==57.4.0
    
# OFED
WORKDIR /tmp
RUN wget -q -O - https://www.mellanox.com/downloads/ofed/MLNX_OFED-5.4-2.4.1.3/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64.tgz | tar xzf - && \
    cd /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64 && \
    ./mlnxofedinstall --user-space-only --without-fw-update --all --skip-unsupported-devices-check -q && \
    cd /tmp && \
    rm -rf /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64*

RUN wget https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2-Linux-x86_64.sh \
         -q -O /tmp/cmake-install.sh && \
    chmod u+x /tmp/cmake-install.sh && \
    mkdir /usr/bin/cmake && \
    /tmp/cmake-install.sh --skip-license --prefix=/usr/bin/cmake && \
    rm /tmp/cmake-install.sh

WORKDIR /tmp
COPY ./rpacks.txt /tmp
RUN R -e 'install.packages(sub("(.+)\\\\n","\\1", scan("rpacks.txt", "character")), repos="'"${CRAN_MIRROR}"'")' && \
    rm rpacks.txt

# Oracle client
RUN mkdir -p /opt/oracle && \
    cd /opt/oracle && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends libaio1 default-libmysqlclient-dev && \
    wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip && \
    unzip instantclient-basiclite-linuxx64.zip && \
    rm -f instantclient-basiclite-linuxx64.zip && \
    cd /opt/oracle/instantclient* && \
    rm -f *jdbc* *occi* *mysql* *README *jar uidrvci genezi adrci && \
    echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.conf && \
    ldconfig

# install git-lfs
WORKDIR /tmp
RUN curl -sLO https://github.com/git-lfs/git-lfs/releases/download/v3.3.0/git-lfs-linux-amd64-v3.3.0.tar.gz && \
    tar -zxf git-lfs-linux-amd64-v3.3.0.tar.gz && \
    cd git-lfs-3.3.0 && \
    bash install.sh && \
    rm -rf /tmp/*

# Install BashTop
WORKDIR /tmp
RUN git clone https://github.com/aristocratos/bashtop.git && \
    cd bashtop && \
    make install

# Install Open UCX
WORKDIR /tmp
RUN wget https://github.com/openucx/ucx/archive/v1.13.1.tar.gz && \
    tar xvf v1.13.1.tar.gz && \
    cd ucx-1.13.1 && \
    bash ./autogen.sh && \
    mkdir build && \
    cd build && \
    ../configure --prefix=/usr/local/ucx && \
    make -j$(nproc) && \
    make install 

# OpenBlas
RUN git clone -q --branch=v0.3.21 https://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make DYNAMIC_ARCH=1 NO_AFFINITY=1 NUM_THREADS=48 FC=gfortran && \
    make install

# XGBoost
RUN git clone  --recursive https://github.com/dmlc/xgboost && \
    cd xgboost && \
    mkdir build && \
    cd build && \
    cmake .. -DUSE_CUDA=ON -DUSE_NCCL=ON && \
    make -j$(nproc) && \
    cd ../python-package && \
    python3 setup.py install 

# LightGBM
RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
    git clone --recursive --branch stable --depth 1 https://github.com/microsoft/LightGBM && \
    cd LightGBM && mkdir build && cd build && \
    cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make OPENCL_HEADERS=/usr/local/cuda-11.7/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-11.7/targets/x86_64-linux/lib -j$(nproc) && \
    cd /usr/local/src/lightgbm/LightGBM/python-package && \
    python3 setup.py install --precompile

# scs-python
RUN cd /tmp && \
    git clone --recursive https://github.com/bodono/scs-python.git  && \
    cd scs-python && \
    python3 setup.py install --scs --gpu

# install NLP packages *mecab-ko & khai*
WORKDIR /tmp
RUN curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz && \
    tar zxfv mecab-0.996-ko-0.9.2.tar.gz && \
    cd mecab-0.996-ko-0.9.2 && \
    ./configure && \
    make -j$(nproc) && \
    make check && \
    make install && \
    echo "Install mecab-ko-dic" && \
    cd /tmp && \
    ldconfig && \
    curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.1.1-20180720.tar.gz && \
    tar -zxvf mecab-ko-dic-2.1.1-20180720.tar.gz && \
    cd mecab-ko-dic-2.1.1-20180720 && \
    ./autogen.sh && \
    ./configure && \
    make -j$(nproc) && \
    sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc' && \
    make install && \
    cd /tmp && \
    git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git && \
    python3 -m pip install /tmp/mecab-python-0.996

# OpenCV
WORKDIR /tmp
ENV OPENCV_VERSION="4.5.5"
RUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h && \
    wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_java=OFF \
      -D WITH_CUDA=ON \
      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.7 \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D WITH_OPENGL=ON \
      -D WITH_OPENCL=ON \
      -D WITH_IPP=ON \
      -D WITH_TBB=ON \
      -D WITH_EIGEN=ON \
      -D WITH_V4L=ON \
      -D BUILD_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-4.5.5/modules" \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      .. 2>&1 | tee cmake_messages.txt && \
    make -j$(nproc) && \
    make install 

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.1/downloads/openmpi-${OPENMPI}.tar.gz && \
    tar zxf openmpi-${OPENMPI}.tar.gz && \
    cd openmpi-${OPENMPI} && \
    ./configure --enable-orterun-prefix-by-default --with-cuda --with-ucx=/usr/local/ucx --without-verbs --enable-mca-no-build=btl-uct && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi* && \
# Install OpenSSH for MPI to communicate between containers
    mkdir -p /var/run/sshd && \
# Allow OpenSSH to talk to containers without asking for confirmation
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config && \
# Create a wrapper for OpenMPI to allow running as root by default
    mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun && \
    ln -s /usr/local/lib/libmpi.so.40.30.2 /usr/local/lib/libmpi.so.12 && \
# Configure OpenMPI to run good defaults:
    echo "btl_tcp_if_exclude = lo,docker0" >> /usr/local/etc/openmpi-mca-params.conf 
RUN MPICC=/usr/lib64/openmpi/bin/mpicc python3 -m pip install mpi4py && \
    python3 -m pip install "jax[cuda11_cudnn805]" -f https://storage.googleapis.com/jax-releases/jax_releases.html 

WORKDIR /tmp
RUN python3 -m pip install --no-cache-dir jax[cuda11_cudnn82]==0.3.25 -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
COPY ./requirements.conda.23.01.txt /tmp/requirements.txt 
RUN python3 -m pip install --no-cache-dir -r requirements.txt 
RUN python3 -m pip --no-cache-dir install git+https://github.com/rpy2/rpy2.git@${RPY2_VERSION} && \
    python3 -m pip install pytorch-lightning && \
    python3 -m pip install --no-cache-dir \
        pyg-lib \
	torch-scatter \
	torch-sparse \
	torch-cluster \
	torch-spline-conv \
	torch-geometric \
        -f https://data.pyg.org/whl/torch-1.13.0+cu117.html && \
    rm -f /tmp/*.whl /tmp/requirements.txt

RUN python3 -m pip install --extra-index-url \
        https://developer.download.nvidia.com/compute/redist/ \
	    nvidia-dali-cuda110==1.22.0 && \
    python3 -m pip install --extra-index-url \
        https://developer.download.nvidia.com/compute/redist/ \
	    nvidia-dali-tf-plugin-cuda110==1.22.0

RUN CUDA_ROOT=/usr/local/cuda python3 -m pip install --no-cache-dir \
        mpi4jax \
	scikit-nni==0.2.1 \
	mlflow==2.1.1 \
	nni==2.10

RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    HOROVOD_NCCL_LINK=SHARED \
    HOROVOD_WITH_MPI=1 \
    HOROVOD_GPU_ALLREDUCE=NCCL \
    NCCL_LIBRARY=/usr/include \
    HOROVOD_NCCL_INCLUDE=/usr/include \
    HOROVOD_NCCL_LIB=/lib/x86_64-linux-gnu \
    HOROVOD_GPU_BROADCAST=NCCL \
    HOROVOD_WITHO_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 \
    python -m pip install --no-cache-dir horovod==0.26.1 && \
    ldconfig

# Install Jupyterlab extensions
RUN python3 -m pip install --no-cache-dir \
    jupyter_nbextensions_configurator \
	jupyter_contrib_nbextensions \
	jupyter_lsp \
	jupyterlab \
	jupyterlab-code-formatter==1.4.10 \
	jupyterlab-hdf==0.5.1 \
	jupyterlab-launcher==0.13.1 \
	jupyterlab-lsp==3.6.0 \
	jupyter-contrib-core==0.3.3 \
	jupyter-contrib-nbextensions==0.5.1 \
	jupyter-dash==0.4.0 \
	jupyter-highlight-selected-word==0.2.0 \
	jupyter-js-widgets-nbextension==0.0.2.dev0 \
	jupyter-kite==1.2.0 \
	jupyter-latex-envs==1.4.6 \
	jupyter-lsp==1.2.0 \
	jupyter-nbextensions-configurator==0.4.1 \
	jupyter-packaging==0.9.2 \
	jupyter-server-mathjax \
	jupyter-server-proxy==1.6.0 \
	jupyter-server \
	jupyter-telemetry==0.1.0 \
	jupyter==1.0.0 \
	jupyter_bokeh==2.0.4 \
	jupyterhub==2.2.2 \
	jupyterhub-jwtauthenticator==0.1 \
	jupyterhub-kubespawner==0.16.1 \
	jupyterhubutils==0.25.0 \
	ipywidgets && \
    jupyter lab build --dev-build=False --minimize=False && \
    jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager && \
    jupyter labextension install --no-build @krassowski/jupyterlab-lsp && \
    jupyter serverextension enable --py jupyter_lsp && \
    jupyter labextension install --no-build @jupyterlab/toc && \
    jupyter nbextension enable execute_time/ExecuteTime && \
    jupyter nbextension enable toc2/main && \
    jupyter nbextension enable hinterland/hinterland && \
    jupyter nbextension enable code_prettify/autopep8 && \
    jupyter nbextension enable nbTranslate/main && \
    jupyter labextension install @jupyterlab/toc && \
    jupyter lab build    

RUN curl -fL https://github.com/cdr/code-server/releases/download/v4.9.1/code-server-4.9.1-linux-amd64.tar.gz \
  | tar -C /usr/local/lib -xz && \ 
    mv /usr/local/lib/code-server-4.9.1-linux-amd64 /usr/local/lib/code-server-4.9.1 && \
    ln -s /usr/local/lib/code-server-4.9.1/bin/code-server /usr/local/bin/code-server && \
    code-server \
        --install-extension ms-python.python \
        --install-extension ms-ceintl.vscode-language-pack-ko

# Backend.AI specifics
# Copy Backend.Ai multi-node support
COPY ./policy.yml /etc/backend.ai/jail/policy.yml
COPY ./service-defs /etc/backend.ai/service-defs
COPY ./runner-scripts/bootstrap.sh runner-scripts/setup_multinode.py /opt/container/
LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.base-distro="ubuntu16.04" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="1g" \
      ai.backend.resource.min.cuda.device=0 \
      ai.backend.resource.min.cuda.shares=0 \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/usr/bin/python3" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8081,jupyterlab:http:8090,vscode:http:8180,tensorboard:http:6006"

# Clean up
RUN apt autoremove -y && \
    apt autoclean && \
    ln -s /usr/local/cuda-11.7/targets/x86_64-linux/lib/libcusolver.so.11 /usr/local/cuda-11.7/targets/x86_64-linux/lib/libcusolver.so.10 && \
    sed -i 's/source \/usr\/local\/nvm\/nvm.sh//' /etc/bash.bashrc && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256color && \
    rm -rf /var/lib/apt/lists/* && \	
    rm -rf /root/.cache && \
    rm -rf /tmp/*

WORKDIR /home/work
