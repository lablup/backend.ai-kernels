9
# CentOS 7.9 comes with Python 2.7

RUN yum install -y epel-release
RUN yum install -y \
        ca-certificates \
        wget curl git-core \
        vim zip unzip \
        libmpdec2 \
        proj proj-devel \
        geos-devel \
        shared-mime-info \
        openblas-devel \
        openssl11-libs openssl-devel openssl11 openssl11-devel \
        libffi-devel bzip2-devel \
        sqlite-devel \
        cmake ncurses-term xz-devel && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256color
RUN yum groupinstall "Development Tools" -y

RUN export CFLAGS="$CFLAGS $(pkg-config --cflags openssl11)"
RUN export LDFLAGS="$LDFLAGS $(pkg-config --libs openssl11)"

RUN curl -sL https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz > /tmp/Python-3.10.13.tgz
RUN cd /tmp && tar xvzf /tmp/Python-3.10.13.tgz && cd Python-3.10.13 && \
    CFLAGS="$CFLAGS $(pkg-config --cflags openssl11)" \
    LDFLAGS="$LDFLAGS $(pkg-config --libs openssl11)" \
    ./configure --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
RUN cd /tmp/Python-3.10.13 && \
    CFLAGS="$CFLAGS $(pkg-config --cflags openssl11)" \
    LDFLAGS="$LDFLAGS $(pkg-config --libs openssl11)" \
    make -j$(nproc) && \
    make altinstall

ENV PYTHONUNBUFFERED=1 \
    PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    LANG=C.UTF-8

# Cartopy>=0.20 requires proj>=8.0.0 but it will ship on Ubuntu 22.04.
RUN curl https://bootstrap.pypa.io/get-pip.py | python3.10 && \
    python3.10 -m pip install --no-cache-dir -U setuptools && \
    python3.10 -m pip install --no-cache-dir h5py && \
    python3.10 -m pip install --no-cache-dir Cython && \
    python3.10 -m pip install --no-cache-dir matplotlib bokeh && \
    python3.10 -m pip install --no-cache-dir versioneer && \
    python3.10 -m pip install --no-cache-dir pyproj cartopy==0.13.0 && \
    python3.10 -m pip install --no-cache-dir pandas && \
    python3.10 -m pip install --no-cache-dir seaborn && \
    python3.10 -m pip install --no-cache-dir pillow && \
    python3.10 -m pip install --no-cache-dir networkx cvxpy && \
    python3.10 -m pip install --no-cache-dir scikit-learn scikit-image && \
    python3.10 -m pip install --no-cache-dir pygments && \
    python3.10 -m pip install --no-cache-dir ipython && \
    python3.10 -m pip install --no-cache-dir jupyter && \
    python3.10 -m pip install --no-cache-dir jupyterlab && \
    rm -rf /root/.cache && \
    rm -f /tmp/*.whl
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.10 2
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 2

# Install ipython kernelspec
RUN python3.10 -m ipykernel install --display-name "Python 3.9 on Backend.AI" && \
    cat /usr/local/share/jupyter/kernels/python3/kernel.json

RUN rm /usr/bin/python && rm /usr/bin/python3 && ln -s /usr/bin/python2.7 /usr/bin/python && ln -s /usr/local/bin/python3.10 /usr/local/bin/python3

# Backend.AI specifics
COPY ./service-defs /etc/backend.ai/service-defs
LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="256m" \
      ai.backend.base-distro="centos7.9" \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/usr/bin/python3" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8070,jupyterlab:http:8090"
COPY policy.yml /etc/backend.ai/jail/policy.yml

# vim: ft=dockerfile
