# python3.11 based on Ubuntu22.04
FROM ubuntu:22.04
MAINTAINER Mario Cho "m.cho@lablup.com"

ARG CODE_SERVER_VERSION=4.17.1 \
    GIT_LFS_VERSION=3.4.0 \ 
    PYTHON_MAJOR_VERSION=3.10 \
    NODEJS_VERSION=18.18.1

ENV DEBIAN_FRONTEND=noninteractive \
    XDG_DATA_HOME=/home/work/.local/share \
    MPLBACKEND=Svg \
    PIP_IGNORE_INSTALLED=0 \
    PYTHONUNBUFFERED=1 \
    LANG=C.UTF-8 \
    PATH="/usr/local/nvm/versions/node/v18.18.1/bin:/usr/local/lib/python3.10/dist-packages/torch_tensorrt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

WORKDIR /tmp
RUN dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
        amd64) tarArch='amd64'; dirArch='x86_64';; \
        armhf) tarArch='arm'; dirArch='arm';; \
        arm64) tarArch='arm64'; dirArch='aarch64';; \
        i386) tarArch='i686'; dirArch='x86';; \
        *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding binary release"; exit 1 ;; \
    esac; \
    LD_LIBRARY_PATH="/usr/local/lib/python${PYTHON_MAJOR_VERSION}/dist-packages/torch/lib:/usr/include/${dirArch}-linux-gnu" \
    apt-get update -y && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    curl -sL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get update && \
    apt-get install -y  && \
    apt-get -y install --no-install-recommends \
    apt-utils \
        automake \
	build-essential \
	cmake \
	curl \
	git \
	libhdf5-dev \
        proj-bin \
	libproj-dev \
        libgeos-dev \
	libgeos++-dev \
	libopenblas-dev \
	libopenblas-dev \
	libhdf5-dev \
	lsof \
	ncurses-term \
	nodejs \
	openssh-client \
	openssh-server \
	pkg-config \
	python${PYTHON_MAJOR_VERSION} \
	python${PYTHON_MAJOR_VERSION}-dev \
	python${PYTHON_MAJOR_VERSION}-distutils \
	python3-tk \
	unzip \
	vim \
	wget \
    htop \
	libcupti-dev && \
    update-alternatives --install /usr/bin/python python /usr/bin/python${PYTHON_MAJOR_VERSION} 2 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_MAJOR_VERSION} 2 && \
    git clone https://github.com/aristocratos/bashtop.git /tmp/bashtop && \
    cd /tmp/bashtop && \
    make install && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256color 

# install git-lfs
RUN cd /tmp && \
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
        amd64) tarArch='amd64'; dirArch='x64';; \
        armhf) tarArch='arm'; dirArch='arm';; \
        arm64) tarArch='arm64'; dirArch='aarch64';; \
        i386) tarArch='i686'; dirArch='x86';; \
        *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding binary release"; exit 1 ;; \
    esac; \
    \
    curl -sLO "https://github.com/git-lfs/git-lfs/releases/download/v${GIT_LFS_VERSION}/git-lfs-linux-${tarArch}-v${GIT_LFS_VERSION}.tar.gz" && \
    tar -zxf "git-lfs-linux-${tarArch}-v${GIT_LFS_VERSION}.tar.gz" && \
    cd /tmp/git-lfs-${GIT_LFS_VERSION} && \
    bash install.sh

WORKDIR /tmp
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir --upgrade setuptools && \
    python3 -m pip install --no-cache-dir h5py && \
    python3 -m pip install --no-cache-dir Cython && \
    python3 -m pip install --no-cache-dir matplotlib bokeh && \
    python3 -m pip install --no-cache-dir versioneer && \
    python3 -m pip install --no-cache-dir pyproj cartopy && \
    python3 -m pip install --no-cache-dir pandas && \
    python3 -m pip install --no-cache-dir seaborn && \
    python3 -m pip install --no-cache-dir pillow && \
    python3 -m pip install --no-cache-dir networkx cvxpy && \
    python3 -m pip install --no-cache-dir scikit-learn scikit-image && \
    python3 -m pip install --no-cache-dir pygments && \
    python3 -m pip install --no-cache-dir ipython && \
    python3 -m pip install --no-cache-dir jupyter && \
    python3 -m pip install --no-cache-dir jupyterlab 

RUN dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
        amd64) tarArch='amd64'; dirArch='x64';; \
        armhf) tarArch='arm'; dirArch='arm';; \
        arm64) tarArch='arm64'; dirArch='aarch64';; \
        i386) tarArch='i686'; dirArch='x86';; \
        *) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding binary release"; exit 1 ;; \
    esac; \
    \
    curl -fL "https://github.com/cdr/code-server/releases/download/v${CODE_SERVER_VERSION}/code-server-${CODE_SERVER_VERSION}-linux-${tarArch}.tar.gz" \
      | tar -C /usr/local/lib -xz && \ 
    mv "/usr/local/lib/code-server-${CODE_SERVER_VERSION}-linux-${tarArch}" /usr/local/lib/code-server-${CODE_SERVER_VERSION} && \
    ln -s /usr/local/lib/code-server-${CODE_SERVER_VERSION}/bin/code-server /usr/local/bin/code-server

# Install ipython kernelspec
RUN python3 -m ipykernel install --display-name "Python ${PYTHON_MAJOR_VERSION} on Backend.AI" && \
    cat /usr/local/share/jupyter/kernels/python3/kernel.json 

# Backend.AI specifics
COPY ./service-defs /etc/backend.ai/service-defs
COPY ./policy.yml /etc/backend.ai/jail/policy.yml
LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="256m" \
      ai.backend.resource.min.atom.device=0 \
      ai.backend.base-distro="ubuntu22.04" \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/usr/bin/python3" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8070,jupyterlab:http:8090,vscode:http:8180"

RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/*

WORKDIR /home/work
# vim: ft=dockerfile
