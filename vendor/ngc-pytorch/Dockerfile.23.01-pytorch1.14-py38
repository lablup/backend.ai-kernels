FROM nvcr.io/nvidia/pytorch:23.01-py3
# NVIDIA NGC PyTorch with Python 3.8 

ENV DEBIAN_FRONTEND=noninteractive \
    MPLBACKEND=Svg \
    PIP_IGNORE_INSTALLED=0 \
    PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="/usr/local/lib/python3.8/dist-packages/torch/lib:/usr/local/lib/python3.8/dist-packages/torch_tensorrt/lib:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda-11.8/include:/usr/include/x86_64-linux-gnu" \
    PATH="/usr/local/nvm/versions/node/v16.15.1/bin:/usr/local/lib/python3.8/dist-packages/torch_tensorrt/bin:/usr/local/mpi/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ucx/bin:/opt/tensorrt/bin:/usr/local/src/lightgbm/LightGBM:/usr/local/bin/mecab" \
    mecab_dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic \
    CPLUS_INCLUDE_PATH=/usr/include/gdal \
    C_INCLUDE_PATH=/usr/include/gdal \
    LANG=C.UTF-8

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.5.tar.gz && \
    tar zxf openmpi-4.1.5.tar.gz && \
    cd openmpi-4.1.5 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi* && \
# Create a wrapper for OpenMPI to allow running as root by default
    mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun && \
# Configure OpenMPI to run good defaults:
    echo "btl_tcp_if_exclude = lo,docker0" >> /usr/local/etc/openmpi-mca-params.conf && \
# Install Horovod, temporarily using CUDA stubs
    HOROVOD_NCCL_LINK=SHARED \
    HOROVOD_WITH_MPI=1 \
    HOROVOD_GPU_ALLREDUCE=NCCL \
    NCCL_LIBRARY=/usr/include \
    HOROVOD_NCCL_INCLUDE=/usr/include \
    HOROVOD_NCCL_LIB=/lib/x86_64-linux-gnu \
    HOROVOD_GPU_BROADCAST=NCCL \
    HOROVOD_GPU_BROADCAST=NCCL \
    HOROVOD_GPU_ALLREDUCE=NCCL \
    HOROVOD_GPU=CUDA \
    HOROVOD_WITHOUT_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITHOUT_MXNET=1 \
    pip install --no-cache-dir horovod==0.26.1 && \
    ldconfig
    
RUN apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com && \
    apt-get update && \
	automake \
	bison \
	build-essential \
	bzip2 \
	ca-certificates \
	cabextract \
	chrpath \
	devscripts \
	dh-make \
	dirmngr \
	dkms \
	dpatch \
	ethtool \
	fakeroot \
	ffmpeg \
	flex \
	fonts-nanum \
	fonts-nanum-coding \
	fonts-nanum-extra \
	g++ \
	gcc \
	gdal-bin \
	gfortran \
	gir1.2-gtk-3.0 \
	git \
	graphviz \
	htop \
	iputils-ping \
	libasound2-dev \
	libatlas-base-dev \
	libavcodec-dev \
	libavformat-dev \
	libavresample-dev \
	libboost-dev \
	libboost-filesystem-dev \
	libboost-system-dev \
	libcairo-dev \
	libcairo2-dev \
	libcurl3-dev \
	libdc1394-22-dev \
	libeigen3-dev \
	libfaac-dev \
	libfftw3-dev \
	libfreetype6-dev \
	libfuse2 \
	libgdal-dev \
	libgeos++-dev \
	libgeos-dev \
	libgflags-dev \
	libgfortran4 \
	libgirepository1.0-dev \
	libglib2.0-0 \
	libgoogle-glog-dev \
	libgphoto2-dev \
	libgstreamer-plugins-base1.0-dev \
	libgstreamer1.0-dev \
	libgtk-3-dev \
	libhdf5-dev \	
	libhdf5-serial-dev \
	libjemalloc-dev \
	libjpeg-dev \
	liblapack-dev \
	libmnl0 \
	libmp3lame-dev \
	libmpdec2 \
	libncurses-dev \
	libnl-3-200 \
	libnl-3-dev \
	libnl-route-3-200 \
	libnl-route-3-dev \
	libnlopt-dev \
	libnuma-dev \
	libopenblas-dev \
	libopencore-amrnb-dev \
	libopencore-amrwb-dev \
	libpci3 \
	libpng-dev \
	libportmidi-dev \
	libproj-dev \
	libprotobuf-dev \
	libsdl-dev \
	libsdl-image1.2-dev \
	libsdl-mixer1.2-dev \
	libsdl-ttf2.0-dev \
	libsm6 \
	libsmpeg-dev \
	libssl-dev \
	libswscale-dev \
	libtbb-dev \
	libtheora-dev \
	libtiff-dev \
	libv4l-dev \
	libvorbis-dev \
	libx264-dev \
	libxext6 \
	libxine2-dev \
	libxml2-dev \
	libxrender-dev \
	libxrender1 \
	libxslt1-dev \
	libxvidcore-dev \
	libzmq3-dev \
	lintian \
	lsof \
	make \
	mercurial \
	mime-support \
	mpich \
	ncurses-term \
	net-tools \
	nodejs \
	openjdk-8-jdk \
	openssh-client \
	openssh-server \
	pbzip2 \
	pciutils \
	pdsh \
	pkg-config \
	proj-bin \
	protobuf-compiler \
	pv \
	python-apt \
	python-xkit \
	python3-gdal \
	screen-resolution-extra \
	subversion \
	swig \
	tk \
	unzip \
	v4l-utils \	
	vim \
	x264 \
	xvfb \
	xz-utils \
	yarn \
	yasm \
	zip \
    tcl \
    udev \
	zlib1g-dev && \
# Install CUDA + cuDNN 
    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.8.6.0 /usr/local/cuda/lib64/libcudnn.so && \
    rm -rf /var/lib/apt/lists/* && \
    ldconfig && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 2

# install NLP packages *mecab-ko & khai*
WORKDIR /tmp
RUN curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz && \
    tar zxfv mecab-0.996-ko-0.9.2.tar.gz && \
    cd mecab-0.996-ko-0.9.2 && \
    ./configure && \
    make -j$(nproc) && \
    make check && \
    make install

RUN echo "Install mecab-ko-dic" && \
    cd /tmp && \
    ldconfig && \
    curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.1.1-20180720.tar.gz && \
    tar -zxvf mecab-ko-dic-2.1.1-20180720.tar.gz && \
    cd mecab-ko-dic-2.1.1-20180720 && \
    ./autogen.sh && \
    ./configure && \
    make -j$(nproc) && \
    sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc' && \
    make install && \
    cd /tmp && \
    git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git && \
    python3 -m pip install /tmp/mecab-python-0.996

# OpenCV
ENV OPENCV_VERSION="4.7.0"
WORKDIR /tmp
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_java=OFF \
      -D WITH_CUDA=ON \
      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.8 \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D WITH_OPENGL=ON \
      -D WITH_OPENCL=ON \
      -D WITH_IPP=ON \
      -D WITH_TBB=ON \
      -D WITH_EIGEN=ON \
      -D WITH_V4L=ON \
      -D BUILD_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-4.7.0/modules" \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      .. 2>&1 | tee cmake_messages.txt && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    python3 -m pip install --no-cache-dir opencv-python && \
    rm -fr opencv* 

WORKDIR /tmp
RUN git clone -q --branch=v0.3.21 https://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make DYNAMIC_ARCH=1 NO_AFFINITY=1 NUM_THREADS=48 FC=gfortran && \
    make install && \
    cd /tmp && \
    git clone --recursive https://github.com/bodono/scs-python.git  && \
    cd /tmp/scs-python && \
    python setup.py install --scs --gpu

# install git-lfs
WORKDIR /tmp
RUN curl -sLO https://github.com/git-lfs/git-lfs/releases/download/v3.3.0/git-lfs-linux-amd64-v3.3.0.tar.gz && \
    tar -zxf git-lfs-linux-amd64-v3.3.0.tar.gz && \
    cd git-lfs-3.3.0 && \
    bash install.sh && \
    rm -rf /tmp/*

WORKDIR /tmp
RUN git clone https://github.com/aristocratos/bashtop.git && \
    cd bashtop && \
    make install

RUN curl -fL https://github.com/cdr/code-server/releases/download/v4.10.0/code-server-4.10.0-linux-amd64.tar.gz \
  | tar -C /usr/local/lib -xz && \ 
    mv /usr/local/lib/code-server-4.10.0-linux-amd64 /usr/local/lib/code-server && \
    ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server && \
    code-server \
        --install-extension ms-python.python \
        --install-extension ms-ceintl.vscode-language-pack-ko


COPY ./requirements.23.01.txt /tmp/requirements.txt
RUN for f in $(ls requirements*.txt); do /opt/conda/bin/python3 -m pip install --disable-pip-version-check --no-cache-dir -r $f; done ; rm /tmp/requirements.txt && \
    rm -f /tmp/*.whl /tmp/requirem*

RUN python3 -m pip install --no-cache-dir \
        mpi4py==3.1.3 \
	    nni==2.9 \
	    mlflow==1.29.0 \
	    scikit-nni==0.2.1

RUN python3 -m pip install pytorch-lightning && \
    python3 -m pip install --no-cache-dir \
        torch-scatter \
	      torch-sparse \
	      torch-cluster \
	      torch-spline-conv \
	      torch-geometric \
        -f https://pytorch-geometric.com/whl/torch-1.14.0%2Bcu117.html && \
    python3 -m pip install widgetsnbextension jupyter_contrib_nbextensions jupyter_lsp markupsafe==2.0.1 
RUN jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager && \
    jupyter labextension install --no-build @krassowski/jupyterlab-lsp && \
    jupyter serverextension enable --py jupyter_lsp && \
    jupyter nbextension enable execute_time/ExecuteTime && \
    jupyter nbextension enable toc2/main && \
    jupyter lab build

Run python3 -m ipykernel install --display-name "PyTorch 1.14 (NGC 23.01/Python 3.8) on Backend.AI" && \
    cat /usr/local/share/jupyter/kernels/python3/kernel.json

RUN apt autoclean && \
    sed -i 's/source \/usr\/local\/nvm\/nvm.sh//' /etc/bash.bashrc && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256color && \
    rm -rf /var/lib/apt/lists/* && \	
    rm -rf /root/.cache && \
    rm -rf /tmp/*
    
# Backend.AI specifics
COPY ./service-defs /etc/backend.ai/service-defs
COPY ./runner-scripts/bootstrap.sh runner-scripts/setup_multinode.py /opt/container/

LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.base-distro="ubuntu16.04" \
      ai.backend.accelerators="cuda" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="1g" \
      ai.backend.resource.min.cuda.device=1 \
      ai.backend.resource.min.cuda.shares=0 \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/usr/bin/python" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8091,jupyterlab:http:8090,vscode:http:8180,tensorboard:http:6006,mlflow-ui:preopen:5000,nniboard:preopen:8080"

WORKDIR /home/work
